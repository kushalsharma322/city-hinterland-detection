# import modules
import community
import networkx as nx
import igraph as ig
import leidenalg as la

# Read road network shapefile
G=nx.read_shp('D:/Master_geospatial/Thesis/work/final_data/roads_final.shp',simplify=True)
G2 = G.to_undirected()

# Assigning unique values for each of the coordinate tuples
pos = {k: v for k,v in enumerate(G2.nodes())}

# Output file directory
out_path_shp='D:/Master_geospatial/Thesis/work/Results/fastgreedy_result.shp'


# Function to convert shapefile into weighted networkx graph
def wgt_nx_graph(Graph,weight_field):
    G3 = nx.Graph()
    G3.add_nodes_from(pos.keys())
	
	# Assign weight field to the graph
    edg=Graph.edges(data=weight_field)
    edgList=[]
    for sl in edg:
        t=tuple(k for k,v in pos.items() if v in sl)
        x=list(t)
		# append weight field
        x.append(sl[2])
		# Remove  eroneous edges if any
        if(len(x)>2):
            edgList.append(tuple(x))
    G3.add_weighted_edges_from(edgList)
    return(G3)
   
 # Function to convert shapefile into non weighted networkx graph   
def non_wgt_nx_graph(Graph):
    G3 = nx.Graph()
    G3.add_nodes_from(pos.keys())
    edg=Graph.edges()
    edgList=[]
    for sl in edg:
        t=tuple(k for k,v in pos.items() if v in sl)
        x=list(t)
		# Remove  eroneous edges if any
        if(len(x)>1):
            edgList.append(tuple(x))

    G3.add_edges_from(edgList)
    return(G3)    

  
# Function to convert shapefile into  weighted igraph graph   	
def wgt_ig_graph(nx_graph,weight_field):
    edg=nx_graph.edges(data=weight_field)
    edgList=[]
    wgtList=[]
    for sl in edg:
        t=tuple(k for k,v in pos.items() if v in sl)
        x=list(t)
        if(len(x)>1):
            edgList.append(tuple(x))
            wgtList.append(sl[2])
	
	#Make empty igraph graph and add edges and vertices
    G4=ig.Graph()
    G4.add_vertices(pos.keys())
    G4.add_edges(edgList)
	# Add weight sequence
    G4.es['weight']=wgtList
    return(G4)

# Function for Louvain community detection    
def louvain(nxGraph,out_path):
    dendrogram = community.generate_dendrogram(nxGraph,resolution=1,weight='weight')
    partition=community.partition_at_level(dendrogram,len(dendrogram)-1)
    nodeCom=[]
    for (x,y) in partition.items():
        t=tuple((pos[x],dict(comm=y)))
        nodeCom.append(t)
    GR=nx.Graph()
    GR.add_nodes_from(nodeCom)
	#export community nodes into shapefile
    nx.write_shp(GR,out_path)

# Function for Leidenalg community detection
def leidenalg(Graph,path):
    partition=la.find_partition(Graph, la.ModularityVertexPartition,weights='weight',n_iterations=10);
    nodeCom={}
    nodeShp=[]
    comm=0
	# Assign detected community nodes into unique community number
    for i in partition:
        for j in i:
            nodeShp.append(tuple((pos[j],{'comm':comm})))
            nodeCom[j]=comm
        comm+=1
    # export community nodes into shapefile    
    GR=nx.Graph()
    GR.add_nodes_from(nodeShp)
    nx.write_shp(GR,path)
	
	# modularity score of the detected communities
    modularity=Graph.modularity(partition,weights='weight')
    print(modularity)
    
# Function for fastgreedy community detection    
def fastgreedy(Graph,path):
    partition=Graph.community_fastgreedy(weights='weight')
	# partition with optimal modularity
    x=partition.as_clustering(n=None)
    nodeShp=[]
    comm=0
    for i in x:
        for j in i:
            nodeShp.append(tuple((pos[j],{'comm':comm})))
        comm+=1
		
    #export partiton communities into shapefile
	final=nx.Graph()
    final.add_nodes_from(nodeShp)
    nx.write_shp(final,path) 
    modularity=Graph.modularity(x,weights='weight')
    print(modularity)
    

##Main Program
#Networkx graph
nx_graph=wgt_nx_graph(G2,'weight_t')

#igraph graph
ig_graph=wgt_ig_graph(G2,'weight_t')


fastgreedy(ig_graph,out_path_shp)
# print('success')





